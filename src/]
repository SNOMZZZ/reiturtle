#include "reiturtle/turtle_controller.h"

TurtleController::TurtleController():private_nh(""){
    private_nh.param("hz", hz, {10});
    sub_pose = nh.subscribe("/turtle1/pose", 10, &TurtleController::pose_callback, this);
    pub_cmd_vel = nh.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 1);
 }

void TurtleController::pose_callback(const turtlesim::Pose::ConstPtr &msg){
    current_pose = *msg;
}

void TurtleController::turn(){
    geometry_msgs::Twist cmd_vel;
    cmd_vel.angular.z = 0.5;

    pub_cmd_vel.publish(cmd_vel);

    old_pose = current_pose;
}

void TurtleController::straight(){
    geometry_msgs::Twist cmd_vel;
    cmd_vel.linear.x = 1;

    pub_cmd_vel.publish(cmd_vel);
    movement();
}

void TurtleController::movement(){
    length = sqrt((old_pose.x - current_pose.x)*(old_pose.x - current_pose.x)+(old_pose.y - current_pose.y)*(old_pose.y - current_pose.y));

    std::cout<<length<<std::endl;
}

void TurtleController::process(){
    ros::Rate loop_rate(hz);

    while(ros::ok()){
        turn();
        // straight();
        // if (length > 2)
        //     turn();

        ros::spinOnce();
        loop_rate.sleep();
    }
}

int main(int argc, char** argv){
    ros::init(argc, argv, "turtle_controller");
    TurtleController turtle_controller;
    turtle_controller.process();
    return 0;
}
